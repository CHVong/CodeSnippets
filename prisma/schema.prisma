generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:fIRRqd0bbQkxQX1HgwJs@containers-us-west-92.railway.app:6647/railway"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  email         String?          @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime         @default(now())
  status        Boolean          @default(true)
  bio           String           @default("")
  accounts      Account[]
  codeSnippets  CodeSnippet[]
  replies       CommentReplies[]
  sessions      Session[]
  comments      SnippetComment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CodeSnippet {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  description String
  language    String
  snippet     String
  title       String
  isPublic    Boolean
  posterId    String
  favorites   String[]         @default([])
  posterName  String           @default("")
  user        User             @relation(fields: [posterId], references: [id], onDelete: Cascade)
  comments    SnippetComment[]
}

model SnippetComment {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  codeSnippetId  String
  commenterId    String
  comment        String
  commenterName  String
  commenterImage String?
  replies        CommentReplies[]
  codeSnippet    CodeSnippet      @relation(fields: [codeSnippetId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [commenterId], references: [id], onDelete: Cascade)
}

model CommentReplies {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  commentId String
  replierId String
  comment   SnippetComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [replierId], references: [id], onDelete: Cascade)
}
